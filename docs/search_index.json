[["index.html", "reportRx &amp; R Markdown 1 Introduction", " reportRx &amp; R Markdown Lisa Avery, Princess Margaret Biostatistics 2021-08-03 1 Introduction R Markdown is an alternative to R Sweave for literate programming and reproducible research. It can output to html, Word and PDF. reportRx is a package to facilitate and standardise the presentation of common statistical analyses. There are four basic types of functions: tabular reporting functions (covsum,uvsum,mvvsum,ordsum) wrappers for printing in Sweave (pcovsum,puvsum,pmvsum) wrappers for printing in RMarkdown (rm_covsum,rm_uvsum,rm_mvsum) plotting functions (ggkmcif,plotunivariate,forestplot,riskplot) R Markdown + reportRx = More time on stats and less time on formatting  A demo RMarkdown document show casing the reportRx functions is available here. "],["r-markdown.html", "2 R Markdown", " 2 R Markdown R Markdown is a package designed for literate R programming and is part of the RStudio IDE. Like Sweave documents, R Markdown documents contain both text and R code. R Markdown documents contain three main parts: The YAML header, which is akin to the header in a Latex document. Code chunks, just like Sweave. Text, just like Sweave, but written in markdown, not Latex. There are excellent tutorials available for learning R Markdown. "],["from-r-markdown-to-pdfwordhtml.html", "2.1 From R Markdown to PDF/Word/HTML", " 2.1 From R Markdown to PDF/Word/HTML With reportRx + Sweave .Rnw documents are first made into pdf documents, and then converted to Word documents. With R Markdown, an .Rmd document is converted to .md and then to PDF, HTML or WORD: "],["why-use-r-markdown-instead-of-sweave.html", "2.2 Why Use R Markdown instead of Sweave?", " 2.2 Why Use R Markdown instead of Sweave? No need to learn Latex! Formatting is a little quicker: # Section Header instead of \\section{Section Header} Easily output to multiple formats, quickly tweak a pdf report to make slides Lots of development work is being done to support document creation in R Markdown: The bookdown package allows you to create gitbooks (like this document) and ebooks (EPUB and MOBI), in addition to the regular HTML, Word, and PDF formats The xaringan package creates great looking presentation slides, with timers, notes, presenter mode and screen cloning the Shiny package is great for interactive statistics and graphs Blogdown for producing websites OpenDocuments, html &amp; pdf slide presentations, lecture handouts read here for more information  If you know Sweave, picking up Markdown is easy! "],["yaml-header.html", "2.3 YAML Header", " 2.3 YAML Header The top of an R Markdown document is called the YAML header (yet another markup language). --- title: &quot;Untitled&quot; author: &quot;Your Name Here&quot; date: &quot;03 August, 2021&quot; output: pdf_document: latex_engine: xelatex word_document: fig_height: 5 fig_width: 7 --- This is where you can specify: Title Author Date theme (html) or reference style document (Word) Table of Contents options figure default heights &amp; widths bibliography/csl files  and lots of other things Having your own *.Rmd template file with the options you most often use is helpful. A simple example is available here and a more comprehensive example is here The ymlthis package can help you to write more complicated YAML headers. "],["code-chunks.html", "2.4 Code Chunks", " 2.4 Code Chunks Like Sweave, R Markdown has code chunks and the options are very similar. In R Markdown, chunk options can be set globally in the setup chunk. These options are over-ridden by any locally set options. For example, to hide the code and suppress warnings and messages in the output you can set the options like this: knitr::opts_chunk$set(echo = FALSE,warning=FALSE,message = FALSE) library(reportRx) Useful chunk options: eval = FALSE prevents evaluation of the code. This can be useful for chunks of code that take a long time to run and you may want to run once and save to an R file. It replaces the need to source a separate R script for some code. echo = FALSE hides the code, but prints any output. warning = FALSE and message = FALSE suppress warnings and messages. results = \"hide\" hides the output (can be used with echo=TRUE). results = \"asis\" treats the output of your R code as literal Markdown. This is useful if you want to generate text from your R code, for example using cat. fig.width = 5 and fig.height = 5 set the height and width of figures (in inches). fig.cap ='A nice caption' will print a caption beneath a figure. For other options see https://yihui.name/knitr/options. "],["running-chunks.html", "2.5 Running Chunks", " 2.5 Running Chunks You can run section of code with Cmd/Ctrl + Shift + Enter, like Sweave, or execute all the code with the green arrow at the top-right corner of the chunk. Unlike Sweave, by default code chucks are executed inline, so that you see the output immediately beneath the code chuck, like this: If you prefer to have the output sent to the Console and the Plots pane instead, then you can you can change this option. In the RStudio menu: Tools &gt; Global Options &gt; R Markdown &gt; Show output inline for all R Markdown Documents. Uncheck This "],["formatting.html", "2.6 Formatting", " 2.6 Formatting R Markdown is designed for quick markup. Inserting page breaks, sections, sub-sections, figures, tables and images is very easy. Formatting is very simple. More extensive formatting is possible and described here. These are the basic formatting options that will work with any output format: _italic_ or *italic* for italic __bold__ or **bold** for bold &lt;!-- Text Comments --&gt; for comments that wont appear in the output [PMH Biostatistics](https://www.biostatspm.com/about-us) for hyperlinks PMH Biostatistics ![cute logo](images/logo.png) for images "],["sections-breaks.html", "2.7 Sections &amp; Breaks", " 2.7 Sections &amp; Breaks # Section Header will start a new section. The space after the # is important. ## Subsection Header for subsections, ### subsubsection and so on. ## unnumbered subsection {-} add {-} for unnumbered headings Control how many sections in the table of contents (if you want a TOC) in the yaml header: output: word_document: toc: yes toc_depth: 3 Pagebreaks (in Word/PDF) can be created with the \\newpage command. Horizontal lines can be created with three hyphens (---) on a separate line. "],["lists.html", "2.8 Lists", " 2.8 Lists Create ordered or unordered lists easily. Note that there must be an empty line before the list. * Unordered list * Item 2 * Nested bullets need a 4-space indent. * Item 2b 1. Ordered list 1. Use `1` for each item and they will be numbered automatically in the output. 1. Handy for when you need to add something in the middle! "],["figures-and-tables.html", "2.9 Figures and Tables", " 2.9 Figures and Tables Plots created in code chucks will be automatically shown in the output, as will Tables formatted by reportRx. Images not created by R can be inserted with this code: ![Optional Caption](filename.png) If you need a table where the data is not in an R object you can use this (colons determine alignment): | Right | Left | Default | Center | |------:|:-----|---------|:------:| | 12 | 12 | 12 | 12 | | 123 | 123 | 123 | 123 | | 1 | 1 | 1 | 1 |  but that is a pain, better to have the data in R and use reportRx. "],["formulas.html", "2.10 Formulas", " 2.10 Formulas Regular Latex-style formulas can be easily written in R markdown. Use single $ for inline expressions and $$ for enclosing standalone expressions. Examples: $\\beta_0 = 1.0$ for embedded inline formulas like this \\(\\beta_0 = 1.0\\) $$OR = \\frac{Odds_{cases}}{Odds_{controls}}$$ \\[OR = \\frac{Odds_{cases}}{Odds_{controls}}\\] More details and examples of how to write matrices are available here. "],["references.html", "2.11 References", " 2.11 References The popular bookdown package has word and pdf output formats that enable easier cross-referencing. ReportRx will produce tables that are properly formatted in all output formats. You can learn more about bookdown here To reference a figure, the chunk needs a name, and for fig.caption to be set and can be referenced using \\@ref(fig:speed-plot) where speed-plot is the name of the chunk containing the figure. Example: Figure 2.1 is an example of a boxplot. {r speed-plot,fig.cap=&#39;Speed and distance.&#39;,fig.height=2.5} data(cars) plot(x=cars$dist,y=cars$speed) Figure 2.1: Speed and distance. To reference tables is a similar, use \\@ref(tab:speed-tab). If outputting to Word, chunk_label needs to be specified as an argument. For HTML/PDF this can be omitted. Hopefully this will be automated for Word one day. Example: Table 2.1 is an example of a table. {r speed-tab} rm_covsum(data=cars,covs = c(&#39;speed&#39;,&#39;dist&#39;), chunk_label = &#39;speed-tab&#39;) Table 2.1: Summary sample statistics. Covariate n=50 speed Mean (sd) 15.4 (5.3) Median (Min,Max) 15 (4,25) dist Mean (sd) 43.0 (25.8) Median (Min,Max) 36 (2,120) "],["citations.html", "2.12 Citations", " 2.12 Citations To add citations use [@bibindex]. For example [@Ensor2014] will produce a citation in the document like this: (1), and will be added to the bibliography with the following entry: "],["creating-a-bibliography.html", "2.13 Creating a bibliography", " 2.13 Creating a bibliography For R Markdown to create the bibliography, a bibliography file (in the biblatex format) needs to be specified in the YAML. Optionally, a csl file can also be specified. Note that if no filepath is specified, then the directory of the .Rmd file is used. In this example, bibfile.bib is in the local directory, but the csl is stored in a central location. bibliography: bibfile.bib csl: ../../../csl/Vancouver.csl There is now a reportRx function, rmdBibfile that will read through an R Markdown document and extract all the references from a master bibfile and write them to a local file along with and all the R packages referenced in the document. reportRx::rmdBibfile('../library.bib','bibfile.bib') will use the file library.bib in the parent directory to extract references from and write a smaller bib file in the local directory stored as bibfile.bib with all the references in the current document, including R packages. The master bibfile can be the .bib file produced by programs like Mendeley or Zotero. "],["an-easy-bibliography-for-r-packages.html", "2.14 An easy bibliography for R packages", " 2.14 An easy bibliography for R packages If you only want to reference R packages in your document then the knitr package has a function to create a bibliography of the loaded R packages. To create the packages.bib file from all the loaded packages: knitr::write_bib(.packages(), &quot;packages.bib&quot;) "],["moving-references.html", "2.15 Moving References", " 2.15 Moving References By default, references are at the end of the document which can be annoying if you would like to put them before an Appendix. Use this command to place the references (this works for all output types). # References &lt;div id=&quot;refs&quot;&gt;&lt;/div&gt;` "],["reportrx.html", "3 reportRx", " 3 reportRx reportRx has reporting functions, printing functions and plotting functions. The actual reporting functions are not called directly, but are called by the printing functions. Reporting Functions: covsum Used to produced Table 1 style output etsum To summarise output from a coxph model uvsum To combine several univariate models into a single table [ordsum] Like uvsum for ordinal output. May be added into uvsum one day mvsum To summarise multivariable model output Printing functions for Sweave use the prefix p (ie. pcovsum()). Printing functions for R Markdown use the prefix rm_ (ie rm_mvsum()). "],["installing-reportrx.html", "3.1 installing reportRx", " 3.1 installing reportRx To install reportRx from the github repository you need to install the devtools package: install.packages(&#39;devtools&#39;) Our most recent version, with the features presented here can then be directly downloaded from github: devtools::install_github(&quot;biostatsPMH/reportRx&quot;, ref=&quot;devel&quot;) For the older stable version you can use this: devtools::install_github(&quot;biostatsPMH/reportRx&quot;, ref=&quot;master&quot;) "],["lung-data.html", "3.2 lung data", " 3.2 lung data The sample code will use data from the lung dataset in the survival package. To run the code samples shown here requires that the lung data be loaded and mutated as follows: library(tidyverse) library(survival) library(reportRx) data(lung) lung &lt;- lung %&gt;% mutate( Status=factor(status-1), Sex = as.character(factor(sex,labels = c(&#39;Male&#39;,&#39;Female&#39;))), sex = factor(sex), OneLevelFactor = factor(x=&#39;one level&#39;) ) lung$Sex[sample(1:nrow(lung),size=10)] &lt;- NA "],["covsum.html", "3.3 covsum", " 3.3 covsum covsum can be used to generate Table 1 style output for either the entire sample, or by specifying the maincov argument, by subgroups. Note the use of rm_covsum. Typing ?covsum will provide a complete description of the covsum arguments. Here the most recent changes are highlighted. rm_covsum(data=lung, covs=c(&#39;Status&#39;,&#39;wt.loss&#39;,&#39;OneLevelFactor&#39;), digits=2, maincov = &#39;Sex&#39;, all.stats=TRUE, include_missing=T, percentage=&#39;row&#39;, pvalue=FALSE) Table 3.1: Summary sample statistics by Sex. Covariate Full Sample (n=228) Female (n=86) Male (n=132) NA (n=10) Status 0 63 36 (57) 26 (41) 1 (2) 1 165 50 (30) 106 (64) 9 (5) wt loss Mean (sd) 9.83 (13.14) 8.02 (13.44) 11.67 (13.00) 2.20 (6.89) Median (Q1,Q3) 7.00 (0.00,15.75) 4.00 (0.00,12.50) 9.00 (1.25,20.00) 1.50 (0.00,4.75) Range (min, max) (-24,68) (-24,52) (-13,68) (-11,16) Missing 14 4 10 0 OneLevelFactor one level 228 86 (38) 132 (58) 10 (4) New Functionality &amp; Bug Fixes digits number of digits for summarizing numeric data pvalue boolean indicating if you want p-values included in the table full boolean indicating if the full sample column should be displayed include_missing prints the number of values of the maincov missing and excluded from the table percentage choice of how percentages are presented ,one of column (default) or row show.tests option to display the statistical tests performed all.tests option of showing both the IQR and the range on separate lines excludeLevels option to exclude levels from covariates from association tests Added functionality to test for small counts in contingency table and perform Fisher.exact if reqd If testcont=T will perform unequal variance t-test for two groups character variables are automatically converted to factors function will now work with data imported from SPSS using haven package function works as expected with factors containing only a single level if median, Q1,Q3 (or Min/Max) are all integers decimals are not reported NaN is no longer displayed, instead cells are empty silenced the try function "],["uvsum.html", "3.4 uvsum", " 3.4 uvsum uvsum will produce a single table with many univariate results rm_uvsum(response = &#39;Status&#39;, covs=c(&#39;wt.loss&#39;,&#39;Sex&#39;,&#39;ph.ecog&#39;,&#39;meal.cal&#39;,&#39;age&#39;), data=lung, CIwidth=.9) Table 3.2: Univariate analysis of predictors of Status. Covariate OR(90%CI) p-value N wt loss 1.01 (0.99,1.03) 0.61 214 Sex &lt;0.001 218 Female Reference 86 Male 2.94 (1.76,4.88) 132 ph ecog 2.17 (1.50,3.15) &lt;0.001 227 meal cal 1.00 (1.00,1.00) 0.75 181 age 1.04 (1.01,1.07) 0.025 228 New Functionality &amp; Bug Fixes showN is an option to show the sample size for each variable/factor level CIwidth allows for differ confidence intervals to be produced output proper t-distribution confidence intervals for means are produced function will check for variables and produce useful warnings character variables are automatically converted to factors function will now work with data imported from SPSS using haven package "],["mvsum.html", "3.5 mvsum", " 3.5 mvsum mvsum will return a consistently formatted table for different types of mutivariable models. This function now supports interaction terms glm_fit = glm(Status~Sex:age+wt.loss,data=lung,family = &#39;binomial&#39;) rm_mvsum(glm_fit) Covariate OR(95%CI) p-value Global p-value wt loss 1.00 (0.98,1.03) 0.9 Sex:age &lt;0.001 Female:age 1.03 (0.99,1.06) 0.14 Male:age 1.04 (1.01,1.08) 0.014 New Functionality &amp; Bug Fixes showN is an option to show the sample size for each variable/factor level CIwidth allows for differ confidence intervals to be produced automatically retrieve data from the model if not specified fixed bug with variable names embedded in level names fixed bug with centering in models added support for polr ordinal regression models updated CIs to use t-test instead of Z-test for means fixed treatment of glm objects to properly handle linear, binomial and poisson models fix to allow interaction terms in the model "],["ggsurv.html", "3.6 ggsurv", " 3.6 ggsurv  this function has been replaced by ggkmcif and may be deprecated. "],["ggkmcif.html", "3.7 ggkmcif", " 3.7 ggkmcif Plot KM and CI curves using ggplot2 with the usual reportRx arguments and a lot of options for customisation for publication-ready plots. ggkmcif(c(&quot;time&quot;,&quot;status&quot;),&quot;Sex&quot;, data=lung,fsize=10,nsize=4) ## [1] &quot;10 observations have been removed due to missing data&quot; "],["plotuv.html", "3.8 plotuv", " 3.8 plotuv Designed to be a visualisation of uvsum with arguments supplied in the same manner. This goal is not publication-ready plots but rather a quick means of displaying the data to facilitate the interpretation of the uvsum output from. plotuv(response = &#39;Status&#39;, covs=c(&#39;Sex&#39;,&#39;ph.ecog&#39;,&#39;meal.cal&#39;,&#39;age&#39;), data=lung) "],["forestplot2.html", "3.9 forestplot2", " 3.9 forestplot2 This will produce a forest plot of OR or RR from an object derived from glm. The risks are plotted on a log-scale, ordered from highest to lowest. fit = glm(Status~age+Sex+wt.loss+ph.karno+ph.ecog+pat.karno+meal.cal, family=&#39;binomial&#39;, data=lung) forestplot2(fit, rmRef=T) (Note: There is an existing forestplot function, which is why this one is named forestplot2) "],["etsum.html", "3.10 etsum", " 3.10 etsum Automatically output text from survival analysis. Set the code chuck option results='asis'. rm_etsum(data = lung, response = c(&quot;time&quot;,&quot;Status&quot;), group = 1, times=c(365,720,1095), units=&quot;days&quot;) Will output this: NOTE: This function currently accepts only integer response variables. "],["outtable.html", "3.11 outTable", " 3.11 outTable This function will output a simple table nicely in any of the main R Markdown output formats, including bookdown. Arguments: to_indent row indices specifying a small indent in the first column to_bold row indices specifying which rows to bold caption a caption to print above the table. library(janitor) tab &lt;- lung %&gt;% tabyl(Status,Sex) outTable(tab, to_indent=1, to_bold=2, caption= &#39;Status by Sex in the Lung data&#39; ) Table 3.3: Status by Sex in the Lung data Status Female Male NA_ 0 36 26 1 1 50 106 9 "],["nesttable.html", "3.12 nestTable", " 3.12 nestTable This function combines two columns into a single column with headers from one column and other values from the second columns Optional Arguments: indent logical indicating if the to_col values should be indented boldheaders logical indicating if the head_col values should be in bold to_bold row indices specifying which rows to bold caption a caption to print above the table. hdr_prefix optional string to prepend to headers hdr_suffix optional string to append to headers twoIDcolumns &lt;- data.frame( Site = rep(c(&#39;A&#39;,&#39;B&#39;),each=5), ID = 1:10, Height_cm = round(rnorm(10,190,10)), Weight_kg = round(rnorm(10,80,3)) ) nestTable(data=twoIDcolumns, head_col = &#39;Site&#39;,to_col = &#39;ID&#39;,hdr_prefix=&#39;Site &#39;) ID Height_cm Weight_kg Site A 1 197 79 2 201 77 3 198 78 4 187 83 5 163 80 Site B 6 199 81 7 183 82 8 188 77 9 205 79 10 185 78 "],["excelcol.html", "3.13 excelCol", " 3.13 excelCol Retrieve the column numbers corresponding to Excel column headers. This can be useful if variables are referred to by Excel column names in the statistical analysis plan. Example: excelCol(A,B,BG,CC) Returns: A B BG CC 1 2 59 81 "],["rmdbibfile.html", "3.14 rmdBibfile", " 3.14 rmdBibfile This function will extract references in the current file from a master bib file and save them to a local bib file. The function works well with Mendeley library *.bib master files. If R packages are referenced in the document these will also be included in the output bib file. R packages can be cited by using the syntax [@R-packagename] for example: [@R-reportRx] for the reportRx package and [@R-base] for the R language itself. Bib file entries can be cited using [@CitationKey] where CitationKey is the entry identifier in the *.bib file. Example rmdBibfile(bibfile = &#39;../../Mendeley/masterbibfile.bib&#39;,outfile=&#39;local.bib&#39;) "],["github.html", "4 Github", " 4 Github reportRx and this documentation are available on the PMH Biostats Github page, along with Jessicas swimmplot package. Anyone can copy or download code from the git repository, without fear of deleting anything. "],["help-us-improve.html", "4.1 Help us Improve", " 4.1 Help us Improve If you find a bug or would like to request a new feature you can log an issue "],["github-account.html", "4.2 Github Account", " 4.2 Github Account If you dont already have a github account you will need to set one up to log issues or access the code. Please log issues using your uhnresearch email (and your real name!). This will help us to prioritise issues arising from within the department. "]]
